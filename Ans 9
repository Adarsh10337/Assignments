Reverse a string without using any built-in string reversal functions:

def reverse_string(string):
    reversed_str = ""
    for char in string:
        reversed_str = char + reversed_str
    return reversed_str

# Example usage
input_string = "Hello, World!"
reversed_string = reverse_string(input_string)
print(reversed_string)

Check if a given string is a palindrome:

def is_palindrome(string):
    reversed_str = reverse_string(string)
    return string == reversed_str

# Example usage
input_string = "radar"
if is_palindrome(input_string):
    print("The string is a palindrome.")
else:
    print("The string is not a palindrome.")


Find the largest element in a given list:

def find_largest_element(lst):
    largest = lst[0]
    for num in lst:
        if num > largest:
            largest = num
    return largest

# Example usage
input_list = [12, 45, 78, 34, 56, 90]
largest_element = find_largest_element(input_list)
print("The largest element is:", largest_element)

Count the occurrence of each element in a list:

def count_occurrences(lst):
    occurrence_count = {}
    for num in lst:
        if num in occurrence_count:
            occurrence_count[num] += 1
        else:
            occurrence_count[num] = 1
    return occurrence_count

# Example usage
input_list = [1, 2, 3, 2, 4, 1, 3, 2, 4, 5]
occurrences = count_occurrences(input_list)
print("Occurrences:", occurrences)

Find the second largest number in a list:

def find_second_largest(lst):
    largest = lst[0]
    second_largest = float('-inf')
    for num in lst:
        if num > largest:
            second_largest = largest
            largest = num
        elif num > second_largest and num < largest:
            second_largest = num
    return second_largest

# Example usage
input_list = [12, 45, 78, 34, 56, 90]
second_largest = find_second_largest(input_list)
print("The second largest element is:", second_largest)

Remove duplicate elements from a list:


def remove_duplicates(lst):
    unique_list = []
    for item in lst:
        if item not in unique_list:
            unique_list.append(item)
    return unique_list

# Example usage
input_list = [1, 2, 3, 2, 4, 1, 3, 2, 4, 5]
result = remove_duplicates(input_list)
print("List after removing duplicates:", result)
Calculate the factorial of a given number:


def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)

# Example usage
number = 5
factorial_result = factorial(number)
print("Factorial of", number, "is:", factorial_result)
Check if a given number is prime:


def is_prime(number):
    if number < 2:
        return False
    for i in range(2, int(number**0.5) + 1):
        if number % i == 0:
            return False
    return True

# Example usage
num = 17
if is_prime(num):
    print(num, "is a prime number.")
else:
    print(num, "is not a prime number.")
Sort a list of integers in ascending order:


def sort_list(lst):
    return sorted(lst)

# Example usage
input_list = [5, 2, 9, 1, 7]
sorted_list = sort_list(input_list)
print("Sorted list:", sorted_list)
Find the sum of all numbers in a list:


def sum_of_numbers(lst):
    return sum(lst)

# Example usage
input_list = [1, 2, 3, 4, 5]
sum_result = sum_of_numbers(input_list)
print("Sum of numbers:", sum_result)

Find the common elements between two lists:


def find_common_elements(list1, list2):
    common_elements = set(list1) & set(list2)
    return list(common_elements)

# Example usage
list1 = [1, 2, 3, 4, 5]
list2 = [4, 5, 6, 7, 8]
common_elements = find_common_elements(list1, list2)
print("Common elements:", common_elements)
Check if a given string is an anagram of another string:


def is_anagram(str1, str2):
    return sorted(str1) == sorted(str2)

# Example usage
string1 = "listen"
string2 = "silent"
if is_anagram(string1, string2):
    print("The strings are anagrams.")
else:
    print("The strings are not anagrams.")
Generate all permutations of a given string:


from itertools import permutations

def generate_permutations(string):
    perms = [''.join(p) for p in permutations(string)]
    return perms

# Example usage
input_string = "abc"
permutations = generate_permutations(input_string)
print("Permutations:", permutations)
Calculate the Fibonacci sequence up to a given number of terms:


def fibonacci_sequence(n):
    sequence = [0, 1]
    if n <= 2:
        return sequence[:n]
    while len(sequence) < n:
        next_num = sequence[-1] + sequence[-2]
        sequence.append(next_num)
    return sequence

# Example usage
terms = 10
fibonacci = fibonacci_sequence(terms)
print("Fibonacci sequence:", fibonacci)
Find the median of a list of numbers:


def find_median(lst):
    sorted_list = sorted(lst)
    n = len(sorted_list)
    if n % 2 == 0:
        mid = n // 2
        median = (sorted_list[mid - 1] + sorted_list[mid]) / 2
    else:
        mid = n // 2
        median = sorted_list[mid]
    return median

# Example usage
input_list = [5, 2, 8, 10, 4, 1]
median_value = find_median(input_list)
print("Median:", median_value)
Check if a given list is sorted in non-decreasing order:


def is_sorted(lst):
    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1))

# Example usage
input_list = [1, 2, 3, 4, 4, 5]
if is_sorted(input_list):
    print("The list is sorted.")
else:
    print("The list is not sorted.")
Find the intersection of two lists:


def find_intersection(list1, list2):
    intersection = list(set(list1) & set(list2))
    return intersection

# Example usage
list1 = [1, 2, 3, 4, 5]
list2 = [4, 5, 6, 7, 8]
intersection = find_intersection(list1, list2)
print("Intersection:", intersection)
Find the maximum subarray sum in a given list:


def max_subarray_sum(lst):
    max_sum = float('-inf')
    curr_sum = 0
    for num in lst:
        curr_sum = max(num, curr_sum + num)
        max_sum = maxApologies for the interruption. Here's the continuation of the code:

```
        max_sum = max(max_sum, curr_sum)
    return max_sum

# Example usage
input_list = [2, -3, 5, -1, 6, -4, 2, 1]
max_sum = max_subarray_sum(input_list)
print("Maximum subarray sum:", max_sum)
Remove all vowels from a given string:


def remove_vowels(string):
    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']
    without_vowels = ''.join(char for char in string if char not in vowels)
    return without_vowels

# Example usage
input_string = "Hello, World!"
without_vowels = remove_vowels(input_string)
print("String without vowels:", without_vowels)
Reverse the order of words in a given sentence:


def reverse_words(sentence):
    words = sentence.split()
    reversed_sentence = ' '.join(reversed(words))
    return reversed_sentence

# Example usage
input_sentence = "Hello, World! I am ."
reversed_sentence = reverse_words(input_sentence)
print("Reversed sentence:", reversed_sentence)
Check if two strings are anagrams of each other:


def is_anagram(str1, str2):
    return sorted(str1) == sorted(str2)

# Example usage
string1 = "listen"
string2 = "silent"
if is_anagram(string1, string2):
    print("The strings are anagrams.")
else:
    print("The strings are not anagrams.")
Find the first non-repeating character in a string:


from collections import Counter

def first_non_repeating_char(string):
    char_count = Counter(string)
    for char in string:
        if char_count[char] == 1:
            return char
    return None

# Example usage
input_string = "abacabad"
non_repeating_char = first_non_repeating_char(input_string)
if non_repeating_char:
    print("First non-repeating character:", non_repeating_char)
else:
    print("No non-repeating character found.")
Find the prime factors of a given number:


def find_prime_factors(n):
    factors = []
    d = 2
    while d * d <= n:
        if n % d == 0:
            factors.append(d)
            n //= d
        else:
            d += 1
    if n > 1:
        factors.append(n)
    return factors

# Example usage
number = 84
prime_factors = find_prime_factors(number)
print("Prime factors of", number, ":", prime_factors)
Check if a given number is a power of two:


def is_power_of_two(n):
    if n <= 0:
        return False
    return (n & (n - 1)) == 0

# Example usage
num = 16
if is_power_of_two(num):
    print(num, "is a power of two.")
else:
    print(num, "is not a power of two.")
Merge two sorted lists into a single sorted list:


def merge_sorted_lists(list1, list2):
    merged_list = []
    i = 0
    j = 0
    while i < len(list1) and j < len(list2):
        if list1[i] <= list2[j]:
            merged_list.append(list1[i])
           Apologies for the interruption. Here's the continuation of the code:

```
            i += 1
        else:
            merged_list.append(list2[j])
            j += 1
    merged_list.extend(list1[i:])
    merged_list.extend(list2[j:])
    return merged_list

# Example usage
list1 = [1, 3, 5, 7]
list2 = [2, 4, 6, 8]
merged_list = merge_sorted_lists(list1, list2)
print("Merged and sorted list:", merged_list)
Find the mode of a list of numbers:


from collections import Counter

def find_mode(lst):
    count = Counter(lst)
    max_count = max(count.values())
    mode = [num for num, freq in count.items() if freq == max_count]
    return mode

# Example usage
input_list = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]
mode_values = find_mode(input_list)
print("Mode(s):", mode_values)
Find the greatest common divisor (GCD) of two numbers:


def find_gcd(a, b):
    while b:
        a, b = b, a % b
    return abs(a)

# Example usage
num1 = 48
num2 = 60
gcd = find_gcd(num1, num2)
print("GCD of", num1, "and", num2, "is:", gcd)
Calculate the square root of a given number:


def calculate_square_root(n):
    if n < 0:
        return None
    elif n == 0:
        return 0
    else:
        x = n
        y = (x + n / x) / 2
        while abs(y - x) >= 1e-8:
            x = y
            y = (x + n / x) / 2
        return y

# Example usage
number = 25
square_root = calculate_square_root(number)
print("Square root of", number, "is:", square_root)
Check if a given string is a valid palindrome ignoring non-alphanumeric characters:


import re

def is_valid_palindrome(string):
    cleaned_string = re.sub(r'\W+', '', string.lower())
    return cleaned_string == cleaned_string[::-1]

# Example usage
input_string = "A man, a plan, a canal: Panama"
if is_valid_palindrome(input_string):
    print("The string is a valid palindrome.")
else:
    print("The string is not a valid palindrome.")
Find the minimum element in a rotated sorted list:


def find_min_rotated(lst):
    left = 0
    right = len(lst) - 1
    while left < right:
        mid = (left + right) // 2
        if lst[mid] > lst[right]:
            left = mid + 1
        else:
            right = mid
    return lst[left]

# Example usage
input_list = [4, 5, 6, 7, 0, 1, 2]
min_value = find_min_rotated(input_list)
print("Minimum element in the rotated sorted list:", min_value)
Find the sum of all even numbers in a list:


def sum_even_numbers(lst):
    return sum(num for num in lst if num % 2 == 0)

# Example usage
input_list = [1, 2, 3, Apologies for the interruption. Here's the continuation of the code:

```
4, 5, 6, 7, 8, 9, 10]
sum_even = sum_even_numbers(input_list)
print("Sum of even numbers:", sum_even)
Calculate the power of a number using recursion:


def power(base, exponent):
    if exponent == 0:
        return 1
    elif exponent < 0:
        return 1 / power(base, -exponent)
    else:
        return base * power(base, exponent - 1)

# Example usage
base = 2
exponent = 3
result = power(base, exponent)
print(base, "raised to the power of", exponent, "is:", result)
Remove duplicates from a list while preserving the order:


def remove_duplicates_preserve_order(lst):
    unique_list = []
    for item in lst:
        if item not in unique_list:
            unique_list.append(item)
    return unique_list

# Example usage
input_list = [1, 2, 3, 2, 4, 1, 3, 2, 4, 5]
result = remove_duplicates_preserve_order(input_list)
print("List after removing duplicates while preserving order:", result)
Find the longest common prefix among a list of strings:


def longest_common_prefix(strings):
    if not strings:
        return ""
    shortest_string = min(strings, key=len)
    for i, char in enumerate(shortest_string):
        if any(string[i] != char for string in strings):
            return shortest_string[:i]
    return shortest_string

# Example usage
input_strings = ["flower", "flow", "flight"]
common_prefix = longest_common_prefix(input_strings)
print("Longest common prefix:", common_prefix)
Check if a given number is a perfect square:


def is_perfect_square(num):
    if num < 0:
        return False
    sqrt = int(num ** 0.5)
    return sqrt * sqrt == num

# Example usage
number = 16
if is_perfect_square(number):
    print(number, "is a perfect square.")
else:
    print(number, "is not a perfect square.")
Calculate the product of all elements in a list:


from functools import reduce
import operator

def product_of_numbers(lst):
    return reduce(operator.mul, lst, 1)

# Example usage
input_list = [1, 2, 3, 4, 5]
product = product_of_numbers(input_list)
print("Product of numbers:", product)
Reverse the order of words in a sentence while preserving the word order:


def reverse_words_preserve_order(sentence):
    words = sentence.split()
    reversed_words = [word[::-1] for word in words]
    reversed_sentence = ' '.join(reversed_words)
    return reversed_sentence

# Example usage
input_sentence = "Hello, World! I am ."
reversed_sentence = reverse_words_preserve_order(input_sentence)
print("Reversed sentence with preserved word order:", reversed_sentence)
Find the missing number in a given list of consecutive numbers:


def find_missing_number(lst):
    n = len(lst) + 1
    total_sum = n * (n + 1) // 2
    actual_sum = sum(lst)
    return total_sum - actual_sum

# Example usage
input_list = [1, 2, 3, 5, 6, 7, 8, 9]
missing_numberApologies for the interruption. Here's the continuation of the code:

```
missing_num = find_missing_number(input_list)
print("Missing number:", missing_num)
Find the sum of digits of a given number:


def sum_of_digits(number):
    return sum(int(digit) for digit in str(abs(number)))

# Example usage
number = 12345
digit_sum = sum_of_digits(number)
print("Sum of digits:", digit_sum)
Check if a given string is a valid palindrome considering case sensitivity:


def is_valid_palindrome_case_sensitive(string):
    return string == string[::-1]

# Example usage
input_string = "Racecar"
if is_valid_palindrome_case_sensitive(input_string):
    print("The string is a valid palindrome.")
else:
    print("The string is not a valid palindrome.")
Find the smallest missing positive integer in a list:


def find_smallest_missing_positive(lst):
    smallest = 1
    for num in sorted(set(lst)):
        if num == smallest:
            smallest += 1
        else:
            return smallest
    return smallest

# Example usage
input_list = [3, 4, -1, 1]
smallest_missing = find_smallest_missing_positive(input_list)
print("Smallest missing positive integer:", smallest_missing)
Find the longest palindrome substring in a given string:


def longest_palindrome(string):
    longest = ""
    for i in range(len(string)):
        for j in range(i, len(string)):
            substring = string[i:j+1]
            if substring == substring[::-1] and len(substring) > len(longest):
                longest = substring
    return longest

# Example usage
input_string = "babad"
longest_palindrome_substring = longest_palindrome(input_string)
print("Longest palindrome substring:", longest_palindrome_substring)
Find the number of occurrences of a given element in a list:


def count_occurrences(lst, element):
    return lst.count(element)

# Example usage
input_list = [1, 2, 3, 2, 4, 1, 3, 2, 4, 5]
element = 2
occurrences = count_occurrences(input_list, element)
print("Occurrences of", element, "in the list:", occurrences)
Check if a given number is a perfect number:


def is_perfect_number(num):
    if num <= 0:
        return False
    divisors = [x for x in range(1, num) if num % x == 0]
    return sum(divisors) == num

# Example usage
number = 28
if is_perfect_number(number):
    print(number, "is a perfect number.")
else:
    print(number, "is not a perfect number.")
Remove all duplicates from a string:


def remove_duplicates(string):
    unique_chars = []
    for char in string:
        if char not in unique_chars:
            unique_chars.append(char)
    return ''.join(unique_chars)

# Example usage
input_string = "Hello, World!"
string_without_duplicates = remove_duplicates(input_string)
print("String without duplicates:", string_without_duplicates)
Reverse the order of words in a sentence while preserving the word order:


def reverse_words_preserve_order(sentence):
    words = sentence.split()
    reversed_words = ' '.join(words[::-1])
    return reversed_words

# Example usage
input_sentence = "Hello, World! I am ."
reversed_sentence = reverse_words_preserve_order(input_sentenceApologies for the interruption. Here's the continuation of the code:

```
print("Reversed sentence with preserved word order:", reversed_sentence)
