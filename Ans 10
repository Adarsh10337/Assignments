1) Calculate the mean sales for each region:


region_a_sales = [10, 15, 12, 8, 14]
region_b_sales = [18, 20, 16, 22, 25]

mean_region_a = sum(region_a_sales) / len(region_a_sales)
mean_region_b = sum(region_b_sales) / len(region_b_sales)

print("Mean sales for Region A:", mean_region_a)
print("Mean sales for Region B:", mean_region_b)


2) Calculate the mode of the survey responses:


survey_responses = [4, 5, 2, 3, 5, 4, 3, 2, 4, 5]

mode = max(set(survey_responses), key=survey_responses.count)

print("Mode of the survey responses:", mode)

3) Calculate the median salary for each department:


department_a_salaries = [5000, 6000, 5500, 7000]
department_b_salaries = [4500, 5500, 5800, 6000, 5200]

median_department_a = sorted(department_a_salaries)[len(department_a_salaries) // 2]
median_department_b = sorted(department_b_salaries)[len(department_b_salaries) // 2]

print("Median salary for Department A:", median_department_a)
print("Median salary for Department B:", median_department_b)

4) Calculate the range of the stock prices:


stock_prices = [25.5, 24.8, 26.1, 25.3, 24.9]

price_range = max(stock_prices) - min(stock_prices)

print("Range of stock prices:", price_range)

5) Perform a t-test to determine if there is a significant difference in the mean scores between the two groups:


import scipy.stats as stats

group_a_scores = [85, 90, 92, 88, 91]
group_b_scores = [82, 88, 90, 86, 87]

t_statistic, p_value = stats.ttest_ind(group_a_scores, group_b_scores)

alpha = 0.05

if p_value < alpha:
    print("There is a significant difference in the mean scores between the two groups.")
else:
    print("There is no significant difference in the mean scores between the two groups.")


6) Calculate the correlation coefficient between advertising expenditure and sales:


import numpy as np

advertising_expenditure = [10, 15, 12, 8, 14]
sales = [25, 30, 28, 20, 26]

correlation_coefficient = np.corrcoef(advertising_expenditure, sales)[0, 1]

print("Correlation coefficient between advertising expenditure and sales:", correlation_coefficient)


7) Calculate the standard deviation of the heights:


import statistics

heights = [160, 170, 165, 155, 175, 180, 170]

standard_deviation = statistics.stdev(heights)

print("Standard deviation of the heights:", standard_deviation)


8) Perform a linear regression analysis to predict job satisfaction based on employee tenure:


import numpy as np
from sklearn.linear_model import LinearRegression

employee_tenure = np.array([2, 3, 5, 4, 6, 2, 4]).reshape(-1, 1)
job_satisfaction = np.array([7, 8, 6, 9, 5, 7, 6])

regression_model = LinearRegression()
regression_model.fit(employee_tenure, job_satisfaction)

slope = regression_model.coef_[0]
intercept = regression_model.intercept_

print("Regression equation: job_satisfaction = {:.2f} * employee_tenure + {:.2f}".format(slope, intercept))


9) Perform an analysis of variance (ANOVA) to determine if there is a significant difference in the mean recovery times between the two medications:


import scipy.stats as stats

medication_a_recovery_times = [10, 12, 14, 11, 13]
medication_b_recovery_times = [15, 17, 16, 14, 18]

f_statistic, p_value = stats.f_oneway(medication_a_recovery_times, medication_b_recovery_times)

alpha = 0.05

if p_value < alpha:
    print("There is a significant difference in the mean recovery times between the two medications.")
else:
    print("There is no significant difference in the mean recovery times between the two medications.")


10) Calculate the 75th percentile of the feedback ratings:


import numpy as np

feedback_ratings = np.array([8, 9, 7, 6, 8, 10, 9, 8, 7, 8])

percentile_75th = np.percentile(feedback_ratings, 75)

print("75th percentile of the feedback ratings:", percentile_75th)
Perform a hypothesis test to determine if the mean weight differs significantly from 10 grams:


from scipy.stats import t

weights = [10.2, 9.8, 10.0, 10.5, 10.3, 10.1]

mean_weight = np.mean(weights)
std_dev = np.std(weights)
sample_size = len(weights)
expected_mean = 10.0

t_statistic = (mean_weight - expected_mean) / (std_dev / np.sqrt(sample_size))
degrees_of_freedom = sample_size - 1
alpha = 0.05

p_value = t.sf(np.abs(t_statistic), degrees_of_freedom) * 2

if p_value < alpha:
    print("The mean weight differs significantly from 10 grams.")
else:
    print("The mean weight does not differ significantly from 10 grams.")
Perform a chi-square test to determine if there is a significant difference in the click-through rates between the two designs:


from scipy.stats import chi2_contingency

design_a_clicks = [100, 120, 110, 90, 95]
design_b_clicks = [80, 85, 90, 95, 100]

contingency_table = [design_a_clicks, design_b_clicks]

chi2, p_value, _, _ = chi2_contingency(contingency_table)

alpha = 0.05

if p_value < alpha:
    print("There is a significant difference in the click-through rates between the two designs.")
else:
    print("There is no significant difference in the click-through rates between the two designs.")
Calculate the 95% confidence interval for the population mean satisfaction score:


import numpy as np
import scipy.stats as stats

satisfaction_scores = np.array([7, 9, 6, 8, 10, 7, 8, 9, 7, 8])

confidence_level = 0.95
sample_mean = np.mean(satisfaction_scores)
sample_std = np.std(satisfaction_scores)
sample_size = len(satisfaction_scores)
z_critical = stats.norm.ppf((1 + confidence_level) / 2)

margin_of_error = z_critical * (sample_std / np.sqrt(sample_size))
confidence_interval = (sample_mean - margin_of_error, sample_mean + margin_of_error)

print("95% Confidence interval for the population mean satisfaction score:", confidence_interval)
Perform a simple linear regression to predict performance based on temperature:


import numpy as np
from sklearn.linear_model import LinearRegression

temperature = np.array([20, 22, 23, 19, 21]).reshape(-1, 1)
performance = np.array([8, 7, 9, 6, 8])

regression_model = LinearRegression()
regression_model.fit(temperature, performance)

slope = regression_model.coef_[0]
intercept = regression_model.intercept_

print("Regression equation: performance = {:.2f} * temperature + {:.2f}".format(slope, intercept))
Perform a Mann-Whitney U test to determine if there is a significant difference in the median preferences between the two groups:


import scipy.stats as stats

group_a_preferences = [4, 3, 5, 2, 4]
group_b_preferences = [3, 2, 4, 3, 3]

_, p_value = stats.mannwhitneyu(group_a_preferences, group_b_preferences)

alpha = 0.05

if p_value < alpha:
    print("There is a significant difference in the median preferences between the two groups.")
else:
    print("There is no significant difference in the median preferences between the two groups.")
Calculate the interquartile range (IQR) of the ages:


import numpy as np

ages = [25, 30, 35, 40, 45, 50, 55, 60, 65, 70]

q1 = np.percentile(ages, 25)
q3 = np.percentile(ages, 75)

iqr = q3 - q1

print("Interquartile range (IQR) of the ages:", iqr)
Perform a Kruskal-Wallis test to determine if there is a significant difference in the median accuracy scores between the algorithms:


import scipy.stats as stats

algorithm_a_scores = [0.85, 0.80, 0.82, 0.87, 0.83]
algorithm_b_scores = [0.78, 0.82, 0.84, 0.80, 0.79]
algorithm_c_scores = [0.90, 0.88, 0.89, 0.86, 0.87]

_, p_value = stats.kruskal(algorithm_a_scores, algorithm_b_scores, algorithm_c_scores)

alpha = 0.05

if p_value < alpha:
    print("There is a significant difference in the median accuracy scores between the algorithms.")
else:
    print("There is no significant difference in the median accuracy scores between the algorithms.")
Perform a simple linear regression to predict sales based on price:


import numpy as np
from sklearn.linear_model import LinearRegression

price = np.array([10, 15, 12, 8, 14]).reshape(-1, 1)
sales = np.array([100, 80, 90, 110, 95])

regression_model = LinearRegression()
regression_model.fit(price, sales)

slope = regression_model.coef_[0]
intercept = regression_model.intercept_

print("Regression equation: sales = {:.2f} * price + {:.2f}".format(slope, intercept))
Calculate the standard error of the mean satisfaction score:


import numpy as np
import scipy.stats as stats

satisfaction_scores = np.array([7, 8, 9, 6, 8, 7, 9, 7, 8, 7])

standard_error = stats.sem(satisfaction_scores)

print("Standard error of the mean satisfaction score:", standard_error)
Perform a multiple regression analysis to predict sales based on advertising expenditure:


import numpy as np
from sklearn.linear_model import LinearRegression

advertising_expenditure = np.array([10, 15, 12, 8, 14]).reshape(-1, 1)
sales = np.array([25, 30, 28, 20, 26])

regression_model = LinearRegression()
regression_model.fit(advertising_expenditure, sales)

slope = regression_model.coef_[0]
intercept = regression_model.intercept_

print("Regression equation: sales = {:.2f} * advertising_expenditure + {:.2f}".format(slope, intercept))
These  solutions should help you analyze the given scenarios and perform the
